from GF2 import one
from mat import Mat
from matutil import coldict2mat, listlist2mat
from solver import solve
from vec import Vec
from vecutil import list2vec

## 1: (Problem 5.14.14) vec2rep
def vec2rep(veclist, v):
    '''
    Input:
    - veclist: a list of Vecs
    - v: a Vec in the span of set(veclist)
    Output:
    the Vec u whose domain is set(range(len(veclist))) that is the coordinate
    representation of v with respect to veclist
    Example:
    >>> v0 = Vec({'a','b','c','d'}, {'a':2})
    >>> v1 = Vec({'a','b','c','d'}, {'a': 16, 'b':4})
    >>> v2 = Vec({'a','b','c','d'}, {'c':8})
    >>> v = Vec({'d', 'a', 'c', 'b'},{'a': -1, 'c': 10, 'b': -1})
    >>> vec2rep([v0,v1,v2], v) == Vec({0, 1, 2},{0: 1.5, 1: -0.25, 2: 1.25})
    True
    '''
    A = coldict2mat(veclist)
    b = v

    #Here I am solving the system of linear eq to find the coords
    u_coords = solve(A, b)

    #After finding the coord i am creating the vector u with the founded coords
    u = Vec(set(range(len(veclist))), u_coords)
    return u


## 2: (Problem 5.14.15) Superfluous Vector in Python
def is_superfluous(L, i):
    '''
    Input:
    - L: list of vectors as instances of Vec class
    - i: integer in range(len(L))
    Output:
    True if the span of the vectors of L is the same
    as the span of the vectors of L, excluding L[i].
    False otherwise.
    Examples:
    >>> D={'a','b','c','d'}
    >>> L = [Vec(D, {'a':1,'b':-1}), Vec(D, {'c':-1,'b':1}), Vec(D, {'c':1,'d':-1}), Vec(D, {'a':-1,'d':1}), Vec(D, {'b':1, 'c':1, 'd':-1})]
    >>> is_superfluous(L,4)
    False
    >>> is_superfluous(L,3)
    True
    >>> is_superfluous(L,2)
    True
    >>> L == [Vec(D,{'a':1,'b':-1}),Vec(D,{'c':-1,'b':1}),Vec(D,{'c':1,'d':-1}),Vec(D, {'a':-1,'d':1}),Vec(D,{'b':1, 'c':1, 'd':-1})]
    True
    >>> is_superfluous([Vec({0,1}, {})], 0)
    True
    >>> is_superfluous([Vec({0,1}, {0:1})], 0)
    False
    '''
    n = len(L)
    if n == 1:
        return True  # We return true because if there is only one vector it will always be supeerflous

    # Creating the matrix a and b
    A = coldict2mat(L[:i] + L[i+1:])
    b = L[i]

    # solving linear eq
    u = solve(A, b)

    # here we need to check if the answers is close to 0
    residual = b - A * u
    return residual * residual < 1e-14  # checking if the sum of the sqaures is bigger 10^-14

## 3: (Problem 5.14.16, Problem 6.7.6) is_independent in Python
def is_independent(L):
    '''
    Input:
    - L: a list of Vecs
    Output:
    - boolean: True if vectors in L are linearly independent
    Example:
    >>> vlist = [Vec({0, 1, 2},{0: 1}), Vec({0, 1, 2},{1: 1}), Vec({0, 1, 2},{2: 1}), Vec({0, 1, 2},{0: 1, 1: 1, 2: 1}), Vec({0, 1, 2},{1: 1, 2: 1}), Vec({0, 1, 2},{0: 1, 1: 1})]
    >>> is_independent(vlist)
    False
    >>> is_independent(vlist[:3])
    True
    >>> is_independent(vlist[:2])
    True
    >>> is_independent(vlist[1:4])
    True
    >>> is_independent(vlist[2:5])
    True
    >>> is_independent(vlist[2:6])
    False
    >>> is_independent(vlist[1:3])
    True
    >>> is_independent(vlist[5:])
    True
    >>> vlist == [Vec({0, 1, 2},{0: 1}), Vec({0, 1, 2},{1: 1}), Vec({0, 1, 2},{2: 1}), Vec({0, 1, 2},{0: 1, 1: 1, 2: 1}), Vec({0, 1, 2},{1: 1, 2: 1}), Vec({0, 1, 2},{0: 1, 1: 1})]
    True
    '''
    for i, v in enumerate(L):
        if is_superfluous(L, i):
            return False
    return True

## 4: (Problem 5.14.17) Subset Basis
def subset_basis(T):
    '''
    Input:
    - T: a list of Vecs
    Output:
    - list S containing Vecs from T that is a basis for the space spanned by T.
    Examples:
    The following tests use the procedures is_superfluous and is_independent,
    written in previous problems.
    >>> a0 = Vec({'a','b','c','d'}, {'a':1})
    >>> a1 = Vec({'a','b','c','d'}, {'b':1})
    >>> a2 = Vec({'a','b','c','d'}, {'c':1})
    >>> a3 = Vec({'a','b','c','d'}, {'a':1,'c':3})
    >>> sb = subset_basis([a0, a1, a2, a3])
    >>> all(v in [a0, a1, a2, a3] for v in sb)
    True
    >>> is_independent(sb)
    True
    >>> all(is_superfluous([a]+sb, 0) for a in [a0, a1, a2, a3])
    True
    >>> b0 = Vec({0,1,2,3},{0:2,1:2,3:4})
    >>> b1 = Vec({0,1,2,3},{0:1,1:1})
    >>> b2 = Vec({0,1,2,3},{2:3,3:4})
    >>> b3 = Vec({0,1,2,3},{3:3})
    >>> sb = subset_basis([b0, b1, b2, b3])
    >>> all(v in [b0, b1, b2, b3] for v in sb)
    True
    >>> is_independent(sb)
    True
    >>> all(is_superfluous([b]+sb, 0) for b in [b0, b1, b2, b3])
    True
    '''
    basis = []
    for v in T:
        if is_independent(basis + [v]):
            basis.append(v)
    return basis
    # TODO: update last test to allow any answer?

## 5: (Problem 5.14.19) Exchange Lemma in Python
def exchange(S, A, z):
    '''
    Input:
    - S: a list of vectors, as instances of your Vec class
    - A: a list of vectors, each of which are in S, with len(A) < len(S)
    - z: an instance of Vec such that A+[z] is linearly independent
    Output: a vector w in S but not in A such that Span S = Span ({z} U S - {w})
    Example:
    >>> S = [list2vec(v) for v in [[0,0,5,3],[2,0,1,3],[0,0,1,0],[1,2,3,4]]]
    >>> A = [list2vec(v) for v in [[0,0,5,3],[2,0,1,3]]]
    >>> z = list2vec([0,2,1,1])
    >>> exchange(S, A, z) == Vec({0, 1, 2, 3},{0: 0, 1: 0, 2: 1, 3: 0})
    True
    '''
    n = len(S[0])  #This here is the diomension of vectors in S

    #Here i am going to construct the matrix B containong the vectors in A followed by z
    B = coldict2mat(A + [z])

    #Solves the eq for B * w = z
    w = solve(B, z)

    #We want to find vector in S but not in A and return it
    for v in S:
        if v not in A:
            return v
